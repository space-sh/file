#
# Copyright 2016-2017 Blockie AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
@clone: string

_dep_install:
    _info:
        title: Check dependencies for this module.
    _env:
        - RUN: FILE_DEP_INSTALL

_info:
    title: File module
    desc: |
        Handles file operations, including creating, searching, setting permissions and removing files.

rmrf:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Forcefully remove a file or directory recursively
        desc: |
            rm -rf a directory.
    _env:
        - file:
            title: File or directory to remove recursively
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: File or directory to remove recursively
                    completion: @{prefix}_list_files/
                    completion_cache: 1
        - RUN: FILE_RMRF -- "${file}"

mkdirp:
    _info:
        title: Create a directory path
        desc: |
            mkdir -p.
    _env:
        - dir:
            title: Directory to create
        - SPACE_ARGS:
            arguments:
                -
                    title: Directory to create
                    values:
                        - dir
        - RUN: FILE_MKDIRP -- "${dir}"

chmod:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Set file permissions
        desc: |
            chmod file or directory.
    _env:
        - permissions:
            title: Permissions
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: Permissions
                    values:
                        - permissions
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
        - RUN: FILE_CHMOD -- "${permissions}" "${file}"

chownr:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Change owner recursively
        desc: |
            chown -r directory.
    _env:
        - owner:
            title: Owner
        - file:
            title: File or directory
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: Owner
                    values:
                        - owner
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
        - RUN: FILE_CHOWNR -- "${owner}" "${file}"

direxist:
    _info:
        title: Check so a directory path does exist
        desc: |
            If the directory does not exist, exit with error.
    _env:
        - dir:
            title: Directory
        - SPACE_ARGS:
            arguments:
                -
                    title: Directory
                    values:
                        - dir
        - RUN: FILE_DIREXIST -- "${dir}"

dirnotexist:
    _info:
        title: Check so that a directory path does not exist
        desc: |
            If the directory does exist, exit with error.
    _env:
        - dir:
            title: Directory
        - SPACE_ARGS:
            arguments:
                -
                    title: Directory
                    values:
                        - dir
        - RUN: FILE_DIRNOTEXIST -- "${dir}"

fileexist:
    _info:
        title: Check so a file path does exist
        desc: |
            If the file does not exist, exit with error.
    _env:
        - file:
            title: File
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    values:
                        - file
        - RUN: FILE_EXIST -- "${file}"

filenotexist:
    _info:
        title: Check so a file path does not exist
        desc: |
            If the file does exist, exit with error.
    _env:
        - file:
            title: File
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    values:
                        - file
        - RUN: FILE_NOT_EXIST -- "${file}"

touch:
    _info:
        title: Touch a file
    _env:
        - file:
            title: File
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    values:
                        - file
        - RUN: FILE_TOUCH -- "${file}"

cat:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Cat a file
        desc: |
            Cat file
    _env:
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    completion: @{prefix}_list_files/
                    completion_cache: 1
        - RUN: FILE_CAT -- "${file}"

ls:
    _info:
        title: List a file
        desc: |
            List one or more files.
    _env:
        - lsargs:
            title: args
        - RUN: FILE_LS -- "${lsargs}"

cp:
    _info:
        title: Copy a file
        desc: |
            Copies a file within same system.
            This does not copy file from or to a
            remote system, use /cat/ and /pipewrite/
            for that.
    _env:
        - src:
            title: Source
            completion: G
        - dest:
            title: Destination
        - SPACE_ARGS:
            arguments:
                -
                    title: Source file
                    completion: G
                -
                    title: Destination file
                    values:
                        - destfile
        - RUN: FILE_CP -- "${src}" "${dest}"

rowpersist:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Make sure that a specific row exists in a file
        desc: |
            Look in the file if the row does already exist,
            if not append it to the file.
    _env:
        - row:
            title: Row
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: Row
                    values:
                        - row
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
        - RUN: FILE_ROW_PERSIST -- "${row}" "${file}"

rowexist:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Check if a row exists in a file
        desc: |
            Look in the file and see if the row exists there,
            if not exit with error.
            Set exist to 0 to invert the exit status.
    _env:
        - row:
            title: Row
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - invert:
            title: Set to invert exit status
            value: ${invert:-0}
        - SPACE_ARGS:
            arguments:
                -
                    title: Row
                    values:
                        - row
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
                -
                    title: Invert
                    values:
                        - 0
                        - 1
        - RUN: FILE_ROW_EXIST -- "${row}" "${file}" "${invert}"

grepcount:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Grep and match count
        desc: |
            Grep a file against pattern and expect the given count
            to match by an operator or else exit with error, as:
                matched -operator count
    _env:
        - pattern:
            title: Pattern
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - count:
            title: Count
            value: ${count:-1}
            values:
                - 0
                - 1
                - 2
                - 3
        - operator:
            title: Operator
            values:
                - eq
                - ne
                - gt
                - ge
                - le
                - lt
        - SPACE_ARGS:
            arguments:
                -
                    title: Pattern
                    values:
                        - pattern
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
                -
                    title: Count
                    values:
                        - 0
                        - 1
                        - 2
                        - 3
                -
                    title: Operator
                    values:
                        - eq
                        - ne
                        - gt
                        - ge
                        - le
                        - lt
        - RUN: FILE_GREP -- "${pattern}" "${file}" "${count}" "${operator}"

grep:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Grep file for pattern
    _env:
        - pattern:
            title: Pattern
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: Pattern
                    values:
                        - pattern
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
        - RUN: FILE_GREP -- "${pattern}" "${file}"

sed:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Sed a pattern in place
    _env:
        - pattern:
            title: Pattern
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: Pattern
                    values:
                        - pattern
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
        - RUN: FILE_SED -- "${pattern}" "${file}"

appendrow:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Append row to file
    _env:
        - row:
            title: Row
        - file:
            title: File
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: Row
                    values:
                        - row
                -
                    title: File
                    completion: @{prefix}_list_files2/
                    completion_cache: 1
        - RUN: FILE_APPEND_ROW -- "${row}" "${file}"

pipewrite:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Write data to file read from stdin
    _env:
        - file:
            title: File to write to
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    completion: @{prefix}_list_files/
                    completion_cache: 1
        - RUN: FILE_PIPE_WRITE -- "${file}"

pipeappend:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Append to a file from stdin
    _env:
        - file:
            title: File to append to
            completion: @{prefix}_list_files/
            completion_cache: 1
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    completion: @{prefix}_list_files/
                    completion_cache: 1
        - RUN: FILE_PIPE_APPEND -- "${file}"

getpermissions:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Get recursive list of permissions
    _env:
        - file:
            title: File or directory
            completion: @{prefix}_list_files/
            completion_cache: 1
        - maxdepth:
            title: Max depth to recurse, optional
            values:
                - 1
                - 2
                - 3
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    completion: @{prefix}_list_files/
                    completion_cache: 1
                -
                    title: Max depth to recurse, optional
                    values:
                        - 1
                        - 2
                        - 3
        - RUN: FILE_GET_PERMISSIONS -- "${file}" "${maxdepth}"

restorepermissions:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Restore list of permissions
        desc: |
            Take a string of permission retrieved from
            /getpermissions/ and restore them from within
            the base directory.
    _env:
        - file:
            title: Base directory
            completion: @{prefix}_list_files/
            completion_cache: 1
        - permissions:
            title: Permissions
        - SPACE_ARGS:
            arguments:
                -
                    title: File
                    completion: @{prefix}_list_files/
                    completion_cache: 1
                -
                    title: Permissions
                    values:
                        - longblobwithpermissions
        - RUN: FILE_RESTORE_PERMISSIONS -- "${file}" "${permissions}"

stat:
    _info:
        title: Display file status
        desc: |
            stat -c.
    _env:
        - file:
            title: File path
        - format:
            title: Format options
        - RUN: FILE_STAT -- "${file}" "${format}"

dirchecksum:
    _info:
        title: Get the checksum of the metadata of a directory, recursively
        desc: |
            Checksum the current state of a directory and print it to stdout
    _env:
        - dir:
            title: The directory to checksum, recursively
        - RUN: FILE_DIR_CHECKSUM "${dir}"

dirchecksumcontent:
    _info:
        title: Get the checksum of the file contents of a directory, recursively
        desc: |
            Checksum the current contents of a directory and print it to stdout
    _env:
        - dir:
            title: The directory to checksum, recursively
        - RUN: FILE_DIR_CHECKSUM_CONTENT "${dir}"

_list_files:
    _env:
        - RUN: _FILE_AC "0" -- "${file-}"
        - SPACE_REDIR: "2>/dev/null"
        - SPACE_MUTE_EXIT: 1
        - SPACE_LOG_LEVEL: 0

_list_files2:
    # When positional argument is #2.
    _env:
        - RUN: _FILE_AC "1" --
        - SPACE_REDIR: "2>/dev/null"
        - SPACE_MUTE_EXIT: 1
        - SPACE_LOG_LEVEL: 0
...
